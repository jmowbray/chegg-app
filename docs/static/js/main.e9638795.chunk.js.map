{"version":3,"sources":["util/apiUtil.js","util/localStorageUtil.js","util/comparatorUtil.js","state/action-creators/appActions.js","state/reducers/appReducer.js","state/reducers/rootReducer.js","components/repositories/connectedRepository.js","components/repositories/repositoryListing.js","components/issues/issue.js","util/dateUtil.js","components/sortable.js","components/issues/connectedSortableIssueListing.js","views/repository-issue-browser/repoIssueBrowser.js","components/textInput.js","components/controls/headerControls.js","App.js","index.js","state/store.js"],"names":["createFetchPromise","url","apiToken","headers","Authorization","Promise","resolve","reject","fetch","then","response","ok","Error","statusText","json","responseJson","catch","error","REPO_ISSUE_ORDER_STORAGE_KEY","getAllDesiredIndices","localStorage","getItem","setItem","JSON","parse","dateComparator","a","b","repoLoadRequested","dispatch","getState","app","org","type","actionTypes","REPO_LOAD_REQUESTED","payload","fetchRepos","repos","REPO_LOAD_SUCCEEDED","REPO_LOAD_FAILED","errorMsg","issuesLoadRequested","repoName","ISSUES_LOAD_REQUESTED","fetchIssuesForRepo","issues","desiredIndices","desiredIndicesForRepo","getDesiredIssueIndicesForRepo","sort","aDesiredIndex","id","bDesiredIndex","aHasDesired","undefined","bHasDesired","created_at","ISSUES_LOAD_SUCCEEDED","ISSUES_LOAD_FAILED","issuesReordered","oldIndex","newIndex","ISSUES_REORDERED","reorderedIssues","mapOfDesiredIssueIndicesById","map","issue","reduce","acc","curr","idx","existingDesired","stringify","updateLocalStorageRepoIssues","selectedRepo","API_KEY_CHANGED","ORG_INPUT_CHANGED","initialState","isLoaded","isLoading","issuesLoading","mapRepo","repo","name","owner","login","ownerAvatarUrl","mapIssue","avatar_url","assignee","title","updated_at","state","action","repoNames","mappedIssues","arrayMove","combineReducers","Repository","handleRepoClicked","event","props","this","repoClassName","className","onClick","viewBox","version","width","height","aria-hidden","fillRule","d","Component","connect","RepositoryListing","length","style","listStyleType","Issue","createdAtString","Date","toLocaleDateString","updatedAtString","date","seconds","Math","floor","interval","timeSince","src","alt","SortableItem","SortableElement","value","SortableList","SortableContainer","items","index","SortableIssuesListing","issueComponents","onSortEnd","RepoIssueBrowser","TextInput","styles","onInput","inputHandler","HeaderControls","handleApiTokenInputChanged","apiTokenInputChanged","target","handleOrgInputChanged","orgInputChanged","App","marginTop","renderRepoIssueBrowser","ReactDOM","render","store","createStore","rootReducer","applyMiddleware","thunk","configureStore","document","getElementById"],"mappings":"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","file":"static/js/main.e9638795.chunk.js","sourcesContent":["export const fetchRepos = (org, apiToken) => {\n    return createFetchPromise(`https://api.github.com/orgs/${org}/repos`, apiToken);\n}\n\nexport const fetchIssuesForRepo = (org, repoName, apiToken) => {\n    return createFetchPromise(`https://api.github.com/repos/${org}/${repoName}/issues`, apiToken);\n}\n\nconst createFetchPromise = (url, apiToken) => {\n    const headers = {};\n    if (apiToken) {\n        headers.Authorization = `token ${apiToken}`\n    }\n\n    return new Promise((resolve, reject) => {\n        fetch(url, { headers })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(response.statusText);\n                }\n                return response.json();\n            })\n            .then(responseJson => resolve(responseJson))\n            .catch(error => reject(error));\n    });\n}","const REPO_ISSUE_ORDER_STORAGE_KEY = 'jim-chegg-app-repoAndIssueOrder';\n\n/**\n * Converts the reordered issues array to a map (for fast lookup)\n * in which the key is the issue ID and the value is the desired\n * index of that issue.\n * \n * The map is stored in localStorage\n * \n * @param {*} reorderedIssues \n * @param {*} repoName \n */\nexport const updateLocalStorageRepoIssues = (reorderedIssues, repoName) => {\n    const mapOfDesiredIssueIndicesById = reorderedIssues\n        .map(issue => issue.id)\n        .reduce((acc, curr, idx) => {\n            acc[curr] = idx;\n            return acc;\n        }, {});\n\n    const existingDesired = getAllDesiredIndices() || {};\n    existingDesired[repoName] = mapOfDesiredIssueIndicesById;\n\n    localStorage.setItem(REPO_ISSUE_ORDER_STORAGE_KEY, JSON.stringify(existingDesired));\n}\n\n/**\n * Returns, from localStorage, the map-of-maps in which the key is the repo and the value is the map\n * of issueIds to desired indices.\n */\nexport const getAllDesiredIndices = () => {\n    if (!localStorage.getItem(REPO_ISSUE_ORDER_STORAGE_KEY)) {\n        localStorage.setItem(REPO_ISSUE_ORDER_STORAGE_KEY, '{}');\n    }\n    return JSON.parse(localStorage.getItem(REPO_ISSUE_ORDER_STORAGE_KEY));\n}\n\n/**\n * Returns, from localStorage, the map issue id's to indices for a specific repo.\n * \n * @param {*} repoName \n */\nexport const getDesiredIssueIndicesForRepo = repoName => {\n    return getAllDesiredIndices()[repoName] || {};\n}","/**\n * Comparator function for sorting issues that have saved \"desired indices\"\n * Desired indices are first priority, and any issues without a desired indice \n * are sorted last, in created_at date descending.\n * \n * @param {*} desiredIndices - The map of desired indices\n */\nexport const issueComparator = desiredIndices => (a, b) => {\n    const aDesiredIndex = desiredIndices[a.id];\n    const bDesiredIndex = desiredIndices[b.id];\n    const aHasDesired = aDesiredIndex !== undefined;\n    const bHasDesired = bDesiredIndex !== undefined;\n\n    if (aHasDesired && bHasDesired) {\n        return aDesiredIndex - bDesiredIndex;\n    } else if (aHasDesired && !bHasDesired) {\n        return -1;\n    } else if (!aHasDesired && bHasDesired) {\n        return 1;\n    }\n\n    return dateComparator(a.created_at, b.created_at);\n}\n\n/**\n * Simple date comparator\n * \n * @param {Date} a \n * @param {Date} b \n */\nexport const dateComparator = (a, b) => {\n    if (a > b) {\n        return -1;\n    } else if (a < b) {\n        return 1;\n    }\n\n    return 0;\n}","import { fetchRepos, fetchIssuesForRepo } from '../../util/apiUtil';\nimport { updateLocalStorageRepoIssues, getDesiredIssueIndicesForRepo } from '../../util/localStorageUtil';\nimport { issueComparator } from '../../util/comparatorUtil';\n\n// TODO: Break into separate action creators\nexport const apiTokenInputChanged = (apiToken) => dispatch => {    \n    dispatch({\n        type: actionTypes.API_KEY_CHANGED,\n        payload: { apiToken: apiToken }\n    });\n}\n\nexport const orgInputChanged = org => dispatch => {\n    dispatch({\n        type: actionTypes.ORG_INPUT_CHANGED,\n        payload: { org: org }\n    });\n}\n\nexport const repoLoadRequested = () => {\n    return (dispatch, getState) => {\n        const { app: { org, apiToken } } = getState();\n\n        dispatch({\n            type: actionTypes.REPO_LOAD_REQUESTED,\n            payload: {}\n        });\n\n        fetchRepos(org, apiToken).then(repos => {\n            dispatch({\n                type: actionTypes.REPO_LOAD_SUCCEEDED,\n                payload: { repos: repos }\n            });\n        }, error => {\n            dispatch({\n                type: actionTypes.REPO_LOAD_FAILED,\n                payload: { errorMsg: error }\n            });\n        });\n    }\n}\n\nexport const issuesLoadRequested = repoName => {\n    return (dispatch, getState) => {\n        const { app: { org, apiToken } } = getState();\n\n        dispatch({\n            type: actionTypes.ISSUES_LOAD_REQUESTED,\n            payload: { repoName: repoName }\n        });\n\n        fetchIssuesForRepo(org, repoName, apiToken).then(issues => {\n            const desiredIndicesForRepo = getDesiredIssueIndicesForRepo(repoName);\n            issues.sort(issueComparator(desiredIndicesForRepo));\n\n            dispatch({\n                type: actionTypes.ISSUES_LOAD_SUCCEEDED,\n                payload: { issues: issues }\n            }, error => {\n                dispatch({\n                    type: actionTypes.ISSUES_LOAD_FAILED,\n                    payload: { errorMsg: error }\n                });\n            });\n        });\n    };\n}\n\nexport const issuesReordered = (oldIndex, newIndex) => {\n    return (dispatch, getState) => {\n        dispatch({\n            type: actionTypes.ISSUES_REORDERED,\n            payload: { oldIndex, newIndex }\n        });\n        \n        updateLocalStorageRepoIssues(getState().app.issues, getState().app.selectedRepo);\n    }\n}\n\nexport const actionTypes = {\n    API_KEY_CHANGED: 'API_KEY_CHANGED',\n    ORG_INPUT_CHANGED: 'ORG_INPUT_CHANGED',\n    REPO_LOAD_REQUESTED: 'REPO_LOAD_REQUESTED',\n    REPO_LOAD_SUCCEEDED: 'REPO_LOAD_SUCCEEDED',\n    REPO_LOAD_FAILED: 'REPO_LOAD_FAILED',\n    ISSUES_LOAD_REQUESTED: 'ISSUES_LOAD_REQUESTED',\n    ISSUES_LOAD_SUCCEEDED: 'ISSUES_LOAD_SUCCEEDED',\n    ISSUES_LOAD_FAILED: 'ISSUES_LOAD_FAILED',\n    ISSUES_REORDERED: 'ISSUES_REORDERED'\n}","// TODO: Break into multiple reducers\nimport { arrayMove } from 'react-sortable-hoc';\nimport { actionTypes } from '../action-creators/appActions';\n\nexport const initialState = {\n    isLoaded: false,\n    isLoading: false,\n    apiToken: null,\n    org: null,\n    repos: [],\n    selectedRepo: null,\n    issues: [],\n    errorMsg: null,\n    issuesLoading: false\n};\n\nconst app = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.API_KEY_CHANGED:\n            return {\n                ...state,\n                apiToken: action.payload.apiToken\n            }\n        case actionTypes.ORG_INPUT_CHANGED:\n            return {\n                ...state,\n                org: action.payload.org\n            }\n        case actionTypes.REPO_LOAD_REQUESTED:\n            return {\n                ...state,\n                isLoading: true,\n                issues: [],\n                selectedRepo: null,\n                errorMsg: null\n            }\n        case actionTypes.REPO_LOAD_SUCCEEDED:\n            const { repos } = action.payload;\n            const repoNames = repos.map(mapRepo);\n            return {\n                ...state,\n                isLoading: false,\n                repos: repoNames,\n                errorMsg: null\n            }\n        case actionTypes.REPO_LOAD_FAILED:\n            return {\n                ...state,\n                isLoading: false,\n                repos: [],\n                errorMsg: `Failed to load repositories for organization '${state.org}'`\n            }\n        case actionTypes.ISSUES_LOAD_REQUESTED:\n            return {\n                ...state,\n                selectedRepo: action.payload.repoName,\n                issuesLoading: true\n            }\n        case actionTypes.ISSUES_LOAD_SUCCEEDED:\n            const { issues } = action.payload;\n            const mappedIssues = issues.map(mapIssue);\n            return {\n                ...state,\n                issues: mappedIssues,\n                issuesLoading: false\n            }\n        case actionTypes.ISSUES_LOAD_FAILED:\n            return {\n                ...state,\n                errorMsg: 'Failed to load issues',\n                issuesLoading: false\n            }\n        case actionTypes.ISSUES_REORDERED:\n            const { oldIndex, newIndex } = action.payload;\n\n            return {\n                ...state,\n                issues: arrayMove(state.issues, oldIndex, newIndex)\n            }\n        default:\n            return state\n    }\n}\n\nconst mapRepo = repo => {\n    return {\n        name: repo.name,\n        issues: repo['open_issues_count'],\n        owner: repo.owner.login,\n        ownerAvatarUrl: repo.owner['avatar_url'],\n        id: repo.id\n    };\n}\n\nconst mapIssue = issue => {\n    return {\n        avatar_url: issue.avatar_url || issue.assignee?.['avatar_url'],\n        title: issue.title,\n        created_at: issue['created_at'],\n        updated_at: issue['updated_at'],\n        id: issue.id\n    };\n}\n\nexport default app;","import { combineReducers } from 'redux';\nimport app from './appReducer';\n\nexport default combineReducers({\n    app: app\n});","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { issuesLoadRequested } from '../../state/action-creators/appActions';\nimport './repository.css';\n\nconst mapStateToProps = state => ({\n    selectedRepo: state.app.selectedRepo\n});\n\nconst mapDispatchToProps = dispatch => ({\n    issuesLoadRequested: repoName => dispatch(issuesLoadRequested(repoName))\n});\n\nclass Repository extends Component {\n\n    handleRepoClicked = (event) => {\n        const { name } = this.props;\n        this.props.issuesLoadRequested(name);\n    }\n\n    render() {\n        const { name, issues, selectedRepo } = this.props;\n        const repoClassName = name === selectedRepo ? \"repository--selected\" : \"repository\";\n\n        return (\n            <div className={repoClassName} onClick={this.handleRepoClicked} >\n                <div>{name}</div>\n                <div className=\"repository__issues\">\n                    {/* I grabbed this issues icon SVG from GitHub */}\n                    <svg viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\">\n                        <path fillRule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm9 3a1 1 0 11-2 0 1 1 0 012 0zm-.25-6.25a.75.75 0 00-1.5 0v3.5a.75.75 0 001.5 0v-3.5z\"></path>\n                    </svg>\n                    <div className=\"repository__issues-count\">{issues}</div>\n                </div>                                \n            </div>        \n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Repository);","import ConnectedRepository from '../repositories/connectedRepository';\n\nexport const RepositoryListing = props => {\n    const { repos, selectedRepo } = props;\n    if (selectedRepo && repos.length === 0) {\n        return <div>No repositories for this organization. There may not be any, or you may be using an invalid API Token</div>\n    }\n    return (\n        <div>\n            <ul style={{ listStyleType: \"none\" }}>\n                {repos.map(repo => <li key={repo.name}><ConnectedRepository {...repo} /></li>)}\n            </ul>\n        </div>\n    );\n}","import { timeSince } from '../../util/dateUtil';\nimport './issue.css';\n\nexport const Issue = props => {\n    const { title, avatar_url, created_at, updated_at } = props;\n    const createdAtString = new Date(created_at).toLocaleDateString(\"en-US\");\n    const updatedAtString = timeSince(new Date(updated_at));\n\n    return (\n        <div className=\"issue\">\n            <div className=\"issue__avatar\" >\n                <img src={avatar_url} alt=\"\" />\n            </div>\n            <div className=\"issue__details\">\n                <div className=\"issue__details-title\">{title}</div>\n                <div className=\"issue__details-times\">\n                    <div>Created: {createdAtString}</div>\n                    <div className=\"issue__details-times-updated\">Updated: {updatedAtString}</div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","// I just Googled for this and it seemed to work.\n// I would use a library (like Moment js) for this in most cases, as I've done in the past\n// since it would probably already be a dependency in the project anyway.\nexport const timeSince = date => {\n    const seconds = Math.floor((new Date() - date) / 1000);\n    let interval = seconds / 31536000;\n  \n    if (interval > 1) {\n      return Math.floor(interval) + \" years ago\";\n    }\n    interval = seconds / 2592000;\n    if (interval > 1) {\n      return Math.floor(interval) + \" months ago\";\n    }\n    interval = seconds / 86400;\n    if (interval > 1) {\n      return Math.floor(interval) + \" days ago\";\n    }\n    interval = seconds / 3600;\n    if (interval > 1) {\n      return Math.floor(interval) + \" hours ago\";\n    }\n    interval = seconds / 60;\n    if (interval > 1) {\n      return Math.floor(interval) + \" minutes ago\";\n    }\n    return Math.floor(seconds) + \" seconds ago\";\n}","import { SortableElement, SortableContainer } from 'react-sortable-hoc';\n\nexport const SortableItem = SortableElement(({value}) => <li>{value}</li>);\n\nexport const SortableList = SortableContainer(({items}) => {\n    return (\n        <ul style={{ listStyleType: \"none\" }}>\n            {items.map((value, index) => (\n                <SortableItem key={`item-${value.props.id}`} index={index} value={value} />\n            ))}\n        </ul>\n    );\n});\n","import { Issue } from './issue';\nimport React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { SortableList } from '../sortable';\nimport  { issuesReordered } from '../../state/action-creators/appActions';\n\nconst mapStateToProps = (state) => {\n    return {\n        issues: state.app.issues,\n        isLoading: state.app.issuesLoading,\n        repoName: state.app.selectedRepo\n    };\n  }\n  \nconst mapDispatchToProps = (dispatch, props) => ({\n    issuesReordered: ({oldIndex, newIndex}) => {\n        dispatch(issuesReordered(oldIndex, newIndex))\n    }\n})\n\nclass SortableIssuesListing extends Component {\n    render() {\n        const { issues, isLoading, repoName, issuesReordered } = this.props;\n\n        if (isLoading) {\n            return <div>Loading...</div>;\n        } else if (repoName && issues && issues.length === 0) {\n            return <div>No issues for this repository.</div>\n        }\n\n        const issueComponents = issues.map(issue => <Issue {...issue} />);\n        return (\n            <div>\n                <div>Viewing issues for repo '{repoName}'. Drag and drop to reorder.</div>\n                <SortableList items={issueComponents} onSortEnd={issuesReordered} />\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SortableIssuesListing);\n","import { RepositoryListing } from '../../components/repositories/repositoryListing';\nimport SortableIssueListing from '../../components/issues/connectedSortableIssueListing';\nimport './repoIssueBrowser.css';\n\nexport const RepoIssueBrowser = props => {\n    const { repos, selectedRepo } = props;\n\n    return (\n        <div className=\"repo-issue-browser\">\n            <div className=\"repo-issue-browser__repos\">\n                <RepositoryListing repos={repos} selectedRepo={selectedRepo} />\n            </div>\n            <div className=\"repo-issue-browser__issues\">\n                {selectedRepo ? <SortableIssueListing /> :\n                    <div>Load/Select a repository to see the associated issues</div>\n                }\n            </div>\n        </div>\n    );\n}","export const TextInput = props => {\n    return (\n        <div>\n            <div>{props.title}</div>\n            <input style={props.styles} type=\"text\" value={props.value} onInput={props.inputHandler}/>\n        </div>        \n    )\n}\n","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { TextInput } from '../textInput';\nimport { apiTokenInputChanged, orgInputChanged, repoLoadRequested } from '../../state/action-creators/appActions';\nimport './headerControls.css';\n\nconst mapStateToProps = state => {\n    return {};\n}\n\nconst mapDispatchToProps = dispatch => ({\n    apiTokenInputChanged: apiToken => dispatch(apiTokenInputChanged(apiToken)),\n    orgInputChanged: org => dispatch(orgInputChanged(org)),\n    repoLoadRequested: () => dispatch(repoLoadRequested()),\n});\n\nclass HeaderControls extends Component {\n\n    handleApiTokenInputChanged = (event) => {\n        this.props.apiTokenInputChanged(event.target.value);\n    }    \n\n    handleOrgInputChanged = event => {\n        this.props.orgInputChanged(event.target.value);\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"directions\">Enter an Organization (required) and an API Token (optional) then click \"Load Repositories\" to load repositories.</div>\n                <div className=\"header-controls\">\n                    <div>\n                        <TextInput \n                            styles={{ width: \"100%\" }} \n                            inputHandler={this.handleOrgInputChanged}\n                            title=\"Organization (IE: 'reactjs')\" />\n                    </div>                    \n                    <div>\n                        <TextInput \n                            styles={{ width: \"100%\" }}\n                            inputHandler={this.handleApiTokenInputChanged} \n                            title=\"API Token\" />\n                    </div>\n                    <div className=\"header-controls__button\">\n                        <button onClick={this.props.repoLoadRequested}>Load Repositories</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HeaderControls);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport './App.css';\nimport './main.css'\nimport { RepoIssueBrowser } from './views/repository-issue-browser/repoIssueBrowser';\nimport HeaderControls from './components/controls/headerControls';\n\nconst mapStateToProps = state => ({\n    ...state\n});\n\nconst mapDispatchToProps = dispatch => ({\n\n});\n\nclass App extends Component {\n\n    renderRepoIssueBrowser() {\n        const { repos, selectedRepo, issues, isLoading, errorMsg, issuesLoading } = this.props.app;\n\n        if (errorMsg) {\n            return <div style={{ marginTop: \"25px\" }}>{errorMsg}</div>\n        } else if (isLoading) {\n            return <div style={{ marginTop: \"25px\" }}>Loading...</div>\n        }\n\n        if (repos) {\n            return (\n                <RepoIssueBrowser repos={repos} issues={issues} selectedRepo={selectedRepo} issuesLoading={issuesLoading} />\n            );\n        }\n\n        return null;\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"header\">\n                    <h1>GitHub Repository Issue Manager</h1>\n                </div>\n\n                <div className=\"app-wrapper\">\n                    <div className=\"app-main\">\n                        <HeaderControls />\n                        <div className=\"repo-issue-browser-wrapper\">\n                            {this.renderRepoIssueBrowser()}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"footer\"></div>\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './state/store';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\n\nexport default function configureStore(initialState = {}) {\n    return createStore(\n        rootReducer,\n        initialState,\n        applyMiddleware(thunk)\n    );\n}"],"sourceRoot":""}